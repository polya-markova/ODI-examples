{
	"info": {
		"_postman_id": "50caeab4-2ab8-4172-a775-8ba2ef425089",
		"name": "IBM ODI R3 v2.0.0 Services Smoke Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get or Refresh Access Token",
			"item": [
				{
					"name": "01 Get Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody)\r",
									"pm.environment.set(\"access_token\", data.access_token);\r",
									"pm.environment.set(\"refresh_token\", data.refresh_token)  \r",
									"pm.environment.set(\"id_token\", data.id_token);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);   \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{CLIENT_ID}}",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{USER_ID}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{USER_PASSWORD}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "openid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Token_Fetch_URL}}",
							"host": [
								"{{Token_Fetch_URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "02 Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// this snippet extracts the new access and id tokens and puts them to environment variables",
									"cp = pm.environment.get(\"cloud_platform\");",
									"var data = JSON.parse(responseBody)",
									"pm.environment.set(\"access_token\", data.access_token);",
									"pm.environment.set(\"id_token\", data.id_token);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Ocp-Apim-Subscription-Key",
								"type": "text",
								"value": "xxxxxxxx",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "refresh_token",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{CLIENT_ID}}",
									"description": "Supply your client id as an environment variable",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{CLIENT_SECRET}}",
									"description": "Supply your client secret as an environment variable",
									"type": "text"
								},
								{
									"key": "refresh_token",
									"value": "{{refresh_token}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "{{Scope}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{Token_Fetch_URL}}",
							"host": [
								"{{Token_Fetch_URL}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Legal",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{LEGAL_HOST}}{{docs_suffix}}",
									"host": [
										"{{LEGAL_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Legal - Create Legal Tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"tagName\", \"Test-Legal-Tag-\" + _.random(1, 9999999));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Ensure the API was able to send a successful response",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{tagName}}\",\n    \"description\": \"Legal Tag added for Well\",\n    \"properties\": {\n        \"contractId\": \"123456\",\n        \"countryOfOrigin\": [\n            \"US\",\n            \"CA\"\n        ],\n        \"dataType\": \"Third Party Data\",\n        \"exportClassification\": \"EAR99\",\n        \"originator\": \"Schlumberger\",\n        \"personalData\": \"No Personal Data\",\n        \"securityClassification\": \"Private\",\n        \"expirationDate\": \"2025-12-25\"\n    }\n}"
								},
								"url": {
									"raw": "{{LEGAL_HOST}}/legaltags",
									"host": [
										"{{LEGAL_HOST}}"
									],
									"path": [
										"legaltags"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Schema",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{SCHEMA_HOST}}{{docs_suffix}}",
									"host": [
										"{{SCHEMA_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Adds a schema to the schema repository",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody)\r",
											"var resp_code= pm.response.code;\r",
											"pm.test(\"Status code is 200 or 201 or 400\", function () {\r",
											"    pm.expect(resp_code).to.be.oneOf([200, 201, 400]);\r",
											"});\r",
											"if ((resp_code == 200) || (resp_code == 201)) {\r",
											"    pm.environment.set(\"kind\", data.schemaIdentity.id);    \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var req = JSON.parse(pm.request.body.raw);\r",
											"pm.environment.set(\"schemaVersionMajor\", req.schemaInfo.schemaIdentity.schemaVersionMajor);\r",
											"pm.environment.set(\"schemaVersionMinor\", req.schemaInfo.schemaIdentity.schemaVersionMinor);\r",
											"pm.environment.set(\"schemaVersionPatch\", req.schemaInfo.schemaIdentity.schemaVersionPatch);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"schemaInfo\": {\r\n\t\t\"schemaIdentity\": {\r\n\t\t\t\"authority\": \"SchemaSanityTest\",\r\n\t\t\t\"source\": \"testSource\",\r\n\t\t\t\"entityType\": \"{{entityType}}\",\r\n\t\t\t\"schemaVersionMajor\": 1,\r\n\t\t\t\"schemaVersionMinor\": 1,\r\n\t\t\t\"schemaVersionPatch\": 0\t\t\r\n\t\t},\r\n\t\t\"status\": \"DEVELOPMENT\"\r\n\t},\r\n  \"schema\": {\r\n   \"$schema\":\"http://json-schema.org/draft-07/schema#\",\r\n   \"x-slb-lifecycle-state\":\"published\",\r\n   \"description\":\"Theentitywell.\",\r\n   \"title\":\"Well\",\r\n   \"type\":\"object\",\r\n   \"definitions\":{\r\n\r\n   },\r\n   \"properties\":{\r\n      \"locationOriginalCRS\":{\r\n         \"description\":\"Thewell'soriginallocationasAnyCrsFeatureCollection-astructuresimilartobutdistinctfromGeoJSON.\",\r\n         \"title\":\"OriginalCRSLocation\",\r\n         \"$ref\":\"#/definition/anyCrsFeatureCollection.1.0\"\r\n      },\r\n      \"allOf\":{\r\n         \"$ref\":\"#/definition/slb..wks..well.1.0\"\r\n      },\r\n      \"locationWGS84\":{\r\n         \"description\":\"Thewell'slocationasGeoJSONFeatureCollection.\",\r\n         \"title\":\"WGS84Location\",\r\n         \"$ref\":\"#/definition/anyCrsFeatureCollection.1.0\",\r\n         \"example\":{\r\n            \"features\":[\r\n               {\r\n                  \"geometry\":{\r\n                     \"coordinates\":[\r\n                        -92.11569999999999,\r\n                        29.8823,\r\n                        153.4779442519685\r\n                     ],\r\n                     \"type\":\"Point\"\r\n                  },\r\n                  \"type\":\"Feature\",\r\n                  \"properties\":{\r\n                     \"name\":\"Newton2-32\"\r\n                  }\r\n               }\r\n            ],\r\n            \"type\":\"FeatureCollection\"\r\n         }\r\n      }\r\n   }\r\n}\r\n}"
								},
								"url": {
									"raw": "{{SCHEMA_HOST}}/schema",
									"host": [
										"{{SCHEMA_HOST}}"
									],
									"path": [
										"schema"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Get Schema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{SCHEMA_HOST}}/schema?schemaVersionMajor={{schemaVersionMajor}}&schemaVersionMinor={{schemaVersionMinor}}&schemaVersionPatch={{schemaVersionPatch}}",
									"host": [
										"{{SCHEMA_HOST}}"
									],
									"path": [
										"schema"
									],
									"query": [
										{
											"key": "schemaVersionMajor",
											"value": "{{schemaVersionMajor}}"
										},
										{
											"key": "schemaVersionMinor",
											"value": "{{schemaVersionMinor}}"
										},
										{
											"key": "schemaVersionPatch",
											"value": "{{schemaVersionPatch}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Entitlements",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{ENTITLEMENTS_HOST}}{{docs_suffix}}",
									"host": [
										"{{ENTITLEMENTS_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Entitlements - Create new data group",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for a successful HTTP response",
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);",
											"});",
											"pm.test(\"Status description - OK or Created \", function () {",
											"    pm.expect(pm.response.status).to.be.oneOf([\"OK\",\"Created\"]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newGroup = \"data.certification\" + _.random(1,99999) + \".viewers\";",
											"pm.environment.set(\"New_ViewerDataGroup\", newGroup);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\" :\"{{New_ViewerDataGroup}}\",\r\n  \"description\" : \"Certification Test Data group with Viewer access\"\r\n}"
								},
								"url": {
									"raw": "{{ENTITLEMENTS_HOST}}/groups",
									"host": [
										"{{ENTITLEMENTS_HOST}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"response": []
						},
						{
							"name": "02 Entitlements - Get groups",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check for a successful HTTP response",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"More then 0 groups returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    if (cp == \"AWS\") {",
											"         pm.expect(Object.keys(jsonData).length).to.not.equal(0);",
											"    }else{",
											" pm.expect(Object.keys(jsonData.groups).length).to.not.equal(0);",
											"    }",
											"   ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"url": {
									"raw": "{{ENTITLEMENTS_HOST}}/groups",
									"host": [
										"{{ENTITLEMENTS_HOST}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Storage",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{STORAGE_HOST}}{{docs_suffix}}",
									"host": [
										"{{STORAGE_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Methods",
					"item": [
						{
							"name": "01 Storage - Get all kinds",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status description - OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{STORAGE_HOST}}/query/kinds",
									"host": [
										"{{STORAGE_HOST}}"
									],
									"path": [
										"query",
										"kinds"
									],
									"query": [
										{
											"key": "cursor",
											"value": null,
											"description": "string",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "200",
											"description": "integer (int32)",
											"disabled": true
										}
									]
								},
								"description": "Get all kinds\nThe API returns a list of all kinds in the specific {Slb-Data-Partition-Id}. Required roles: 'users.datalake.editors' or 'users.datalake.admins'."
							},
							"response": []
						},
						{
							"name": "02 Legal - Create Legal Tag",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"tagName\", \"Test-Legal-Tag-\" + _.random(1, 9999999));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody)",
											"pm.test(\"Status code is 200 or 201\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
											"});",
											"",
											"pm.environment.set(\"LegalTagName\", data.name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"{{tagName}}\",\n    \"description\": \"Legal Tag added for Well\",\n    \"properties\": {\n        \"contractId\": \"123456\",\n        \"countryOfOrigin\": [\n            \"US\",\n            \"CA\"\n        ],\n        \"dataType\": \"Third Party Data\",\n        \"exportClassification\": \"EAR99\",\n        \"originator\": \"Schlumberger\",\n        \"personalData\": \"No Personal Data\",\n        \"securityClassification\": \"Private\",\n        \"expirationDate\": \"2025-12-25\"\n    }\n}"
								},
								"url": {
									"raw": "{{LEGAL_HOST}}/legaltags",
									"host": [
										"{{LEGAL_HOST}}"
									],
									"path": [
										"legaltags"
									]
								}
							},
							"response": []
						},
						{
							"name": "03 Storage - Create records",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"/*pm.test(\"Status description - Records created and/or updated successfully.\", function () {",
											"    pm.response.to.have.status(\"Records created and/or updated successfully.\");",
											"});*/",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var rand = _.random(999111111111, 999999999999);\r",
											"var dataPartition = pm.environment.get(\"data-partition-id\");\r",
											"var record = pm.environment.get(\"record_mid\");\r",
											"//postman.setEnvironmentVariable(\"recordID\", dataPartition + \":\" + record + \":\" + rand);\r",
											"pm.environment.set(\"recordID\", dataPartition + \":\" + record + \":\" + rand);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									},
									{
										"key": "Accept",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"acl\": {\n      \"owners\": [\n        \"{{New_OwnerDataGroup}}@{{data-partition-id}}{{domain}}\"\n      ],\n      \"viewers\": [\n        \"{{New_ViewerDataGroup}}@{{data-partition-id}}{{domain}}\"\n      ]\n    },\n    \"data\": {\n        \"msg\": \"hello world from Data Lake\"\n      },\n    \"id\": \"{{recordID}}\",\n    \"kind\": \"{{kind}}\",\n    \"legal\": {\n      \"legaltags\": [\n        \"{{LegalTagName}}\"\n      ],\n      \"otherRelevantDataCountries\": [\n        \"US\"\n      ],\n      \"status\": \"compliant\"\n    },\n    \"meta\": [\n      {}\n    ],\n    \"version\": 0\n  }\n]\n\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{STORAGE_HOST}}/records",
									"host": [
										"{{STORAGE_HOST}}"
									],
									"path": [
										"records"
									],
									"query": [
										{
											"key": "skipdupes",
											"value": "true",
											"description": "Skip duplicates when updating records with the same value.",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "04 Storage - Get record",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Status description - OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"description": "This value should be the desired data partition id.",
										"key": "data-partition-id",
										"type": "text",
										"value": "{{data-partition-id}}"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{STORAGE_HOST}}/records/{{recordID}}",
									"host": [
										"{{STORAGE_HOST}}"
									],
									"path": [
										"records",
										"{{recordID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "File",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinations",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{FILE_HOST}}/api-docs",
									"host": [
										"{{FILE_HOST}}"
									],
									"path": [
										"api-docs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Get UploadURL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{FILE_HOST}}/files/uploadURL",
									"host": [
										"{{FILE_HOST}}"
									],
									"path": [
										"files",
										"uploadURL"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "WorkFlow",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{WORKFLOW_HOST}}{{docs_suffix}}",
									"host": [
										"{{WORKFLOW_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Get Workflows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{WORKFLOW_HOST}}/v1/workflow?prefix=test",
									"host": [
										"{{WORKFLOW_HOST}}"
									],
									"path": [
										"v1",
										"workflow"
									],
									"query": [
										{
											"key": "prefix",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{SEARCH_HOST}}/v2/api-docs",
									"host": [
										"{{SEARCH_HOST}}"
									],
									"path": [
										"v2",
										"api-docs"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Method",
					"item": [
						{
							"name": "01 Search On Basis Of Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"kind\" : \"{{kind}}\" \r\n}"
								},
								"url": {
									"raw": "{{SEARCH_HOST}}/query",
									"host": [
										"{{SEARCH_HOST}}"
									],
									"path": [
										"query"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Indexer",
			"item": [
				{
					"name": "API",
					"item": [
						{
							"name": "getAPIDefinitions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code to be 200\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "data-partition-id",
										"value": "{{data-partition-id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{INDEXER_HOST}}{{docs_suffix}}",
									"host": [
										"{{INDEXER_HOST}}{{docs_suffix}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
